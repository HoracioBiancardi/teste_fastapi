name: CI/CD Pipeline2

on:
  push:
    branches:
      - 'release/**'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12.3'

      - name: Install Poetry
        run: |
          pip install poetry

      - name: Install dependencies
        run: poetry install

      - name: Install pytest-cov
        run: poetry add --dev pytest-cov

      - name: Run tests with coverage
        run: |
          poetry run pytest --cov=.

      - name: Verify coverage
        id: verify-coverage
        run: |
          poetry run coverage report --fail-under=80 

  require_approval:
    needs: build
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Request approval for release
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: pullRequests } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: 'release',
              state: 'open'
            });
            if (pullRequests.length === 0) {
              console.log('Creating pull request for the release branch...');
              await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'Merge release branch into main',
                head: 'release',
                base: 'main'
              });
            } else {
              console.log('Pull request already exists for the release branch.');
            }











#  require-approval:
#    runs-on: ubuntu-latest
#    needs: build
#
#    steps:
#      - name: Download coverage check result
#        uses: actions/download-artifact@v2
#        with:
#          name: coverage-check
#
#      - name: Read coverage check result
#        id: read-coverage-check
#        run: |
#          coverage_failed=$(cat coverage_check.txt)
#          echo "coverage_failed=$coverage_failed" >> $GITHUB_ENV
#
#      - uses: trstringer/manual-approval@v1
#        with:
#          secret: ${{ github.TOKEN }}
#          approvers: HoracioBiancardi
#
#  merge-release-to-main:
#    runs-on: ubuntu-latest
#    needs: require-approval
#
#    steps:
#      - uses: actions/checkout@master
#
#      - name: Merge release -> main
#        uses: devmasx/merge-branch@master
#        with:
#          type: now
#          target_branch: main
#          message: Merge release into main
#          github_token: ${{ secrets.GITHUB_TOKEN }}
