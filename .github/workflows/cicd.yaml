name: CI/CD Pipeline2

on:
  push:
    branches:
      - 'release/**'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12.3'

      - name: Install Poetry
        run: |
          pip install poetry

      - name: Install dependencies
        run: poetry install

      - name: Install pytest-cov
        run: poetry add --dev pytest-cov

      - name: Run tests with coverage
        run: |
          poetry run pytest --cov=./ --cov-report=xml

      - name: Verify coverage
        id: verify-coverage
        run: |
          poetry run coverage report --fail-under=80 || echo "coverage_failed=true" >> $GITHUB_ENV

      - name: Upload coverage report
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report
          path: coverage.xml

      - name: Save coverage check result
        run: |
          echo "coverage_failed=${{ env.coverage_failed }}" > coverage_check.txt
        if: always()

      - name: Upload coverage check result
        uses: actions/upload-artifact@v2
        with:
          name: coverage-check
          path: coverage_check.txt

  manual-trigger_pull_main:
    runs-on: ubuntu-latest
    needs: build
    outputs:
        CONTINUE_JOBS: ${{ steps.manual-trigger.outputs.CONTINUE_JOBS }}
    steps:
      - name: manual-trigger
        id: manual-trigger
        uses: benhamiltonpro/manual-trigger@v1
        with:
          RUN_NAME: "require-approval"


  require-approval:
    runs-on: ubuntu-latest
    needs: manual-trigger_pull_main
    steps:
      - name: Download coverage check result
        uses: actions/download-artifact@v2
        with:
          name: coverage-check

      - name: Read coverage check result
        id: read-coverage-check
        run: |
          coverage_failed=$(cat coverage_check.txt)
          echo "coverage_failed=$coverage_failed" >> $GITHUB_ENV

      - name: Wait_for_approval Action
        uses: arun291091/wait_for_approval_gha@v1
        with:
          base_repository_branch: main
          github_org: HoracioBiancardi
          repository_name: teste_fastapi
          pr_reviewer: HoracioBiancardi
          time_limit: 180
          github_token: ${{ secrets.GITHUB_TOKEN }}

#  require-approval:
#    runs-on: ubuntu-latest
#    needs: build
#
#    steps:
#      - name: Download coverage check result
#        uses: actions/download-artifact@v2
#        with:
#          name: coverage-check
#
#      - name: Read coverage check result
#        id: read-coverage-check
#        run: |
#          coverage_failed=$(cat coverage_check.txt)
#          echo "coverage_failed=$coverage_failed" >> $GITHUB_ENV
#
#      - uses: trstringer/manual-approval@v1
#        with:
#          secret: ${{ github.TOKEN }}
#          approvers: HoracioBiancardi
#
#  merge-release-to-main:
#    runs-on: ubuntu-latest
#    needs: require-approval
#
#    steps:
#      - uses: actions/checkout@master
#
#      - name: Merge release -> main
#        uses: devmasx/merge-branch@master
#        with:
#          type: now
#          target_branch: main
#          message: Merge release into main
#          github_token: ${{ secrets.GITHUB_TOKEN }}
