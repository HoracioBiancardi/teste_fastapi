name: CI/CD Pipeline

on:
  push:
    branches:
      - 'release/**'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'  # Especifique a versão do Python aqui ou use um valor dinâmico se necessário

      - name: Install Poetry
        run: pip install poetry

      - name: Install dependencies
        run: poetry install

      - name: Install pytest-cov
        run: poetry add --dev pytest-cov

      - name: Run tests with coverage
        run: |
          poetry run pytest --cov=./ --cov-report=xml

      - name: Verify coverage
        id: verify-coverage
        run: |
          poetry run coverage report --fail-under=80 || echo "coverage_failed=true" >> $GITHUB_ENV

      - name: Upload coverage report
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report
          path: coverage.xml

      - name: Save coverage check result
        run: |
          echo "coverage_failed=${{ env.coverage_failed }}" > coverage_check.txt
        if: always()

      - name: Upload coverage check result
        uses: actions/upload-artifact@v2
        with:
          name: coverage-check
          path: coverage_check.txt

  require-approval:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download coverage check result
        uses: actions/download-artifact@v2
        with:
          name: coverage-check

      - name: Read coverage check result
        id: read-coverage-check
        run: |
          coverage_failed=$(cat coverage_check.txt)
          echo "coverage_failed=$coverage_failed" >> $GITHUB_ENV

      - name: Wait for approval
        if: env.coverage_failed != 'true'
        uses: pull-request-merge@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Merge pull request into main
        if: env.coverage_failed != 'true'
        uses: actions/github-script@v5
        with:
          script: |
            github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              merge_method: 'merge'
            })
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  merge-release-to-main:
    runs-on: ubuntu-latest
    needs: require-approval

    steps:
      - name: Download coverage check result
        uses: actions/download-artifact@v2
        with:
          name: coverage-check

      - name: Read coverage check result
        id: read-coverage-check
        run: |
          coverage_failed=$(cat coverage_check.txt)
          echo "coverage_failed=$coverage_failed" >> $GITHUB_ENV

      - name: Merge release into main
        if: env.coverage_failed != 'true'
        run: |
          git fetch origin
          git checkout main
          git merge --no-ff ${{ github.head_ref }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Push changes to main
        if: env.coverage_failed != 'true'
        run: |
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
