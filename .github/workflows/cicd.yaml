name: CI/CD Pipeline

on:
  push:
    branches:
      - 'release/**'
  pull_request_review:
    types: [submitted]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12.3'

      - name: Install Poetry
        run: pip install poetry

      - name: Install dependencies
        run: poetry install

      - name: Install pytest-cov
        run: poetry add --dev pytest-cov

      - name: Run tests with coverage
        run: |
          poetry run pytest --cov=./ --cov-report=xml

      - name: Verify coverage
        id: verify-coverage
        run: |
          poetry run coverage report --fail-under=80 || echo "coverage_failed=true" >> $GITHUB_ENV

      - name: Upload coverage report
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report
          path: coverage.xml

      - name: Save coverage check result
        run: |
          echo "coverage_failed=${{ env.coverage_failed }}" > coverage_check.txt
        if: always()

      - name: Upload coverage check result
        uses: actions/upload-artifact@v2
        with:
          name: coverage-check
          path: coverage_check.txt

  merge:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Wait for approval
        if: github.event_name == 'pull_request_review' && github.event.review.state == 'approved'
        run: echo "Pull request approved"
      
      - name: Merge pull request into main
        if: github.event_name == 'pull_request_review' && github.event.review.state == 'approved'
        uses: actions/github-script@v5
        with:
          script: |
            github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              merge_method: 'merge'
            })
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
